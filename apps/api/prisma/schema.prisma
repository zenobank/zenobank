generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NetworkType {
  EVM
  SOLANA
}

model Wallet {
  id      String @id @default(uuid())
  address String @unique

  networkId NetworkId
  network   Network   @relation(fields: [networkId], references: [id])

  privateKey     String
  label          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  AddressBinding AddressBinding[]
}

model PaymentRequest {
  id             String          @id @default(uuid())
  orderCurrency  String // ISO 4217
  orderAmount    BigInt
  notifyUrl      String
  orderId        String          @unique
  expiredAt      DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  AddressBinding AddressBinding?
}

enum TokenStandard {
  NATIVE
  ERC20
  BEP20
  TRC20
  SPL
}

enum NetworkId {
  ETHEREUM_MAINNET
  BASE_MAINNET
  ARBITRUM_MAINNET
  ETHEREUM_HOLESKY
}

model Network {
  id          NetworkId   @id
  networkType NetworkType @unique
  name        String      @unique
  isTestnet   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  TokenOnNetwork TokenOnNetwork[]
  Wallet         Wallet[]
}

model TokenCanonical {
  id           String   @id
  name         String
  symbol       String
  isStablecoin Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  variants TokenOnNetwork[]

  @@unique([symbol, name])
}

model TokenOnNetwork {
  id               String         @id
  canonicalTokenId String
  canonicalToken   TokenCanonical @relation(fields: [canonicalTokenId], references: [id])

  standard     TokenStandard
  address      String
  decimals     Int
  symbol       String
  isDeprecated Boolean       @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  network   Network   @relation(fields: [networkId], references: [id])
  networkId NetworkId

  Deposit Deposit[]

  @@unique([networkId, address])
  @@index([canonicalTokenId])
  @@index([networkId, symbol])
}

enum AddressBindingType {
  TOPUP // address for recurring deposits
  SINGLE_USE_PAYMENT
}

model AddressBinding {
  id         String             @id @default(uuid())
  type       AddressBindingType
  merchantId String?
  userId     String?

  paymentRequestId String?         @unique
  paymentRequest   PaymentRequest? @relation(fields: [paymentRequestId], references: [id])

  walletId String?
  wallet   Wallet? @relation(fields: [walletId], references: [id])
  address  String

  expiresAt DateTime?
  active    Boolean   @default(true)

  createdAt     DateTime  @default(now())
  deactivatedAt DateTime?

  deposits Deposit[]

  @@index([type, userId])
  @@index([type, merchantId])
}

enum DepositStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Deposit {
  id        String         @id @default(uuid())
  bindingId String
  binding   AddressBinding @relation(fields: [bindingId], references: [id])

  tokenId String
  token   TokenOnNetwork @relation(fields: [tokenId], references: [id])

  txHash        String
  amountAtomic  BigInt
  confirmations Int           @default(0)
  status        DepositStatus @default(PENDING)
  firstSeenAt   DateTime      @default(now())
  confirmedAt   DateTime?

  @@unique([tokenId, txHash]) // idempotencia por activo en red
  @@index([bindingId, status])
}
