generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NetworkType {
  EVM
  SOLANA
}

model Wallet {
  id      String @id @default(uuid())
  address String

  networkId NetworkId
  network   Network   @relation(fields: [networkId], references: [id])

  privateKey String
  label      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  depositForPayment Payment? @relation(name: "DepositWallet")

  @@unique([networkId, address])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  EXPIRED
  CANCELLED
}

model Payment {
  id String @id @default(uuid())

  title       String?
  description String?

  currency     String
  amount       String
  amountFilled String        @default("0")
  notifyUrl    String
  orderId      String        @unique
  expiredAt    DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       PaymentStatus @default(PENDING)

  tokenId String?
  token   TokenOnNetwork? @relation(fields: [tokenId], references: [id])

  networkId NetworkId?
  network   Network?   @relation(fields: [networkId], references: [id])

  transactionId String?      @unique
  transaction   Transaction? @relation(name: "PaymentTx", fields: [transactionId], references: [id])

  depositWalletId String? @unique
  depositWallet   Wallet? @relation(name: "DepositWallet", fields: [depositWalletId], references: [id])
}

enum TokenStandard {
  NATIVE
  ERC20
  BEP20
  TRC20
  SPL
}

enum NetworkId {
  ETHEREUM_MAINNET
  BASE_MAINNET
  ARBITRUM_MAINNET
  ETHEREUM_HOLESKY
}

model Network {
  id          NetworkId   @id
  networkType NetworkType
  name        String      @unique
  isTestnet   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  tokens       TokenOnNetwork[]
  transactions Transaction[]
  wallets      Wallet[]
  Payment      Payment[]
}

model TokenCanonical {
  id           String   @id
  name         String
  symbol       String
  isStablecoin Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  variants TokenOnNetwork[]

  @@unique([symbol, name])
}

model TokenOnNetwork {
  id               String         @id
  canonicalTokenId String
  canonicalToken   TokenCanonical @relation(fields: [canonicalTokenId], references: [id])

  standard     TokenStandard
  address      String
  decimals     Int
  symbol       String
  isDeprecated Boolean       @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  network   Network   @relation(fields: [networkId], references: [id])
  networkId NetworkId

  transactions Transaction[]
  payments     Payment[]

  @@unique([networkId, address])
  @@index([canonicalTokenId])
  @@index([networkId, symbol])
}

enum AddressBindingType {
  TOPUP
  SINGLE_USE_PAYMENT
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Transaction {
  id   String @id @default(uuid())
  hash String

  fromAddress String
  toAddress   String

  title       String
  description String?
  amount      String
  amountFiat  String

  tokenId String
  token   TokenOnNetwork @relation(fields: [tokenId], references: [id])

  networkId NetworkId
  network   Network   @relation(fields: [networkId], references: [id])

  confirmations Int               @default(0)
  status        TransactionStatus @default(PENDING)
  firstSeenAt   DateTime          @default(now())
  confirmedAt   DateTime?

  payment Payment? @relation(name: "PaymentTx")

  @@unique([networkId, hash])
  @@index([tokenId])
  @@index([fromAddress])
  @@index([toAddress])
}
