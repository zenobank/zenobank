generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentRail {
  ONCHAIN
  BINANCE_PAY
}

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores    Store[]
}

model Store {
  id               String         @id @default(cuid())
  name             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  apiKey           String         @unique @default(cuid())
  userId           String?
  binanceId        String?
  binanceApiKey    String?
  binanceSecretKey String?
  payments         Payment[]
  user             User?          @relation(fields: [userId], references: [id])
  wallets          Wallet[]
  binanceConfig    BinanceConfig?
}

model BinanceConfig {
  id               String @id @default(uuid())
  binanceId        String
  binanceApiKey    String
  binanceSecretKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String @unique
  store   Store  @relation(fields: [storeId], references: [id])
}

model Wallet {
  id        String    @id @default(uuid())
  address   String
  networkId String
  label     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  storeId   String?
  payments  Payment[] @relation("DepositWallet")
  network   Network   @relation(fields: [networkId], references: [id])
  store     Store?    @relation(fields: [storeId], references: [id])

  @@unique([networkId, address])
}

model Payment {
  id      String @id @default(cuid())
  orderId String

  priceCurrency String
  priceAmount   String

  payAmount     String?
  payCurrencyId String?
  payCurrency   Token?  @relation(fields: [payCurrencyId], references: [id])

  paidAt    DateTime?
  expiredAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  status PaymentStatus @default(PENDING)

  networkId       String?
  depositWalletId String?
  storeId         String?

  successUrl String?
  webhookUrl String?

  verificationToken    String?
  transactionHash      String?
  confirmationAttempts Int      @default(0)
  depositWallet        Wallet?  @relation("DepositWallet", fields: [depositWalletId], references: [id])
  network              Network? @relation(fields: [networkId], references: [id])
  store                Store?   @relation(fields: [storeId], references: [id])
}

model Network {
  id                      String      @id
  networkType             NetworkType
  name                    String      @unique
  displayName             String
  isTestnet               Boolean
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  confirmationRetryDelay  Int         @default(1000)
  maxConfirmationAttempts Int         @default(100)
  minBlockConfirmations   Int         @default(3)
  payments                Payment[]
  tokens                  Token[]
  wallets                 Wallet[]
}

model Token {
  id               String        @id
  canonicalTokenId String
  standard         TokenStandard
  address          String
  decimals         Int
  symbol           String
  isDeprecated     Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  networkId        String
  payments         Payment[]
  network          Network       @relation(fields: [networkId], references: [id])

  @@unique([networkId, address])
  @@index([canonicalTokenId])
  @@index([networkId, symbol])
}

enum NetworkType {
  EVM
  SOLANA
}

enum PaymentStatus {
  PENDING
  UNDER_PAYMENT
  COMPLETED
  EXPIRED
  CANCELLED
  PROCESSING
}

enum TokenStandard {
  NATIVE
  ERC20
  BEP20
  TRC20
  SPL
}

enum AddressBindingType {
  TOPUP
  SINGLE_USE_PAYMENT
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum WebhookProvider {
  ALCHEMY
}
