generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NetworkType {
  EVM
  SOLANA
}

model Wallet {
  id      String @id @default(uuid())
  address String @db.Citext

  networkId String
  network   Network @relation(fields: [networkId], references: [id])

  privateKey String
  label      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  payments Payment[] @relation("DepositWallet")

  activityWebhook   ActivityWebhook? @relation(fields: [activityWebhookId], references: [id])
  activityWebhookId String?

  @@unique([networkId, address])
}

enum PaymentStatus {
  PENDING
  UNDER_PAYMENT
  COMPLETED
  EXPIRED
  CANCELLED
}

model Payment {
  id String @id @default(uuid())

  title       String?
  description String?

  currency String
  amount   String

  tokenAmount       String?
  tokenAmountFilled String  @default("0")

  notifyUrl String
  orderId   String        @unique
  expiredAt DateTime
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    PaymentStatus @default(PENDING)

  tokenId String?
  token   Token?  @relation(fields: [tokenId], references: [id])

  networkId String?
  network   Network? @relation(fields: [networkId], references: [id])

  transactionId String?      @unique
  transaction   Transaction? @relation(name: "PaymentTx", fields: [transactionId], references: [id])

  depositWalletId String?
  depositWallet   Wallet? @relation(name: "DepositWallet", fields: [depositWalletId], references: [id])
}

enum TokenStandard {
  NATIVE
  ERC20
  BEP20
  TRC20
  SPL
}

model Network {
  id          String      @id
  networkType NetworkType
  name        String      @unique
  displayName String
  isTestnet   Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  depositConfirmations Int
  avgBlockTime         Int

  tokens           Token[]
  transactions     Transaction[]
  wallets          Wallet[]
  Payment          Payment[]
  activityWebhooks ActivityWebhook[]
}

model Token {
  id               String @id
  canonicalTokenId String

  standard     TokenStandard
  address      String        @db.Citext
  decimals     Int
  symbol       String
  isDeprecated Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  network   Network  @relation(fields: [networkId], references: [id])
  networkId String

  transactions Transaction[]
  payments     Payment[]

  @@unique([networkId, address])
  @@index([canonicalTokenId])
  @@index([networkId, symbol])
}

enum AddressBindingType {
  TOPUP
  SINGLE_USE_PAYMENT
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Transaction {
  id   String @id @default(uuid())
  hash String

  fromAddress String @db.Citext
  toAddress   String @db.Citext

  title       String
  description String?

  networkId String
  network   Network @relation(fields: [networkId], references: [id])

  confirmations Int               @default(0)
  status        TransactionStatus @default(PENDING)
  firstSeenAt   DateTime          @default(now())
  confirmedAt   DateTime?

  payment Payment? @relation(name: "PaymentTx")
  Token   Token?   @relation(fields: [tokenId], references: [id])
  tokenId String?

  @@unique([networkId, hash])
  @@index([fromAddress])
  @@index([toAddress])
}

// model TransactionTransfer {
//   id             String @id @default(uuid())
//   transactionId  String
//   transaction    Transaction @relation(fields: [transactionId], references: [id])

//   fromAddress    String
//   toAddress      String
//   tokenId        String?     // null si es nativo
//   amount         Decimal
//   amountFiat     Decimal?    // snapshot opcional

//   logIndex       Int?        // para EVM logs
//   traceId        String?     // para internal txs

//   createdAt      DateTime @default(now())

//   @@index([transactionId])
//   @@index([fromAddress])
//   @@index([toAddress])
// }

enum WebhookProvider {
  ALCHEMY
}

model ActivityWebhook {
  id        String @id @default(uuid())
  webhookId String @unique

  providerId WebhookProvider

  networkId String
  network   Network @relation(fields: [networkId], references: [id])

  currentSize Int @default(0)
  maxSize     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wallets Wallet[]
}
