generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        String    @id @default(uuid())
  name      String
  domain    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  apiKey    String    @unique @default(cuid())
  Payment   Payment[]
  wallets   Wallet[]
}

model Wallet {
  id                String           @id @default(uuid())
  address           String
  networkId         String
  label             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  activityWebhookId String?
  storeId           String?
  payments          Payment[]        @relation("DepositWallet")
  activityWebhook   ActivityWebhook? @relation(fields: [activityWebhookId], references: [id])
  network           Network          @relation(fields: [networkId], references: [id])
  Store             Store?           @relation(fields: [storeId], references: [id])

  @@unique([networkId, address])
}

model Payment {
  id                String        @id @default(cuid())
  orderId           String
  title             String?
  description       String?
  priceCurrency     String
  priceAmount       String
  storeId           String?
  payAmount         String?
  payAmountFilled   String        @default("0")
  paidAt            DateTime?
  expiredAt         DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  status            PaymentStatus @default(PENDING)
  payCurrencyId     String?
  networkId         String?
  transactionId     String?       @unique
  depositWalletId   String?
  successUrl        String?
  verificationToken String?
  webhookUrl        String?
  depositWallet     Wallet?       @relation("DepositWallet", fields: [depositWalletId], references: [id])
  network           Network?      @relation(fields: [networkId], references: [id])
  payCurrency       Token?        @relation(fields: [payCurrencyId], references: [id])
  store             Store?        @relation(fields: [storeId], references: [id])
  Transaction       Transaction?  @relation(fields: [transactionId], references: [id])
}

model Network {
  id                   String            @id
  networkType          NetworkType
  name                 String            @unique
  displayName          String
  isTestnet            Boolean
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  depositConfirmations Int
  avgBlockTime         Int
  activityWebhooks     ActivityWebhook[]
  Payment              Payment[]
  tokens               Token[]
  Transaction          Transaction[]
  wallets              Wallet[]
}

model Token {
  id               String        @id
  canonicalTokenId String
  standard         TokenStandard
  address          String
  decimals         Int
  symbol           String
  isDeprecated     Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  networkId        String
  Payment          Payment[]
  network          Network       @relation(fields: [networkId], references: [id])
  Transaction      Transaction[]

  @@unique([networkId, address])
  @@index([canonicalTokenId])
  @@index([networkId, symbol])
}

model ActivityWebhook {
  id          String          @id @default(uuid())
  webhookId   String          @unique
  providerId  WebhookProvider
  networkId   String
  currentSize Int             @default(0)
  maxSize     Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  network     Network         @relation(fields: [networkId], references: [id])
  wallets     Wallet[]
}

model Transaction {
  id            String            @id
  hash          String
  fromAddress   String
  toAddress     String
  title         String
  description   String?
  networkId     String
  confirmations Int               @default(0)
  status        TransactionStatus @default(PENDING)
  firstSeenAt   DateTime          @default(now())
  confirmedAt   DateTime?
  tokenId       String?
  Payment       Payment?
  Network       Network           @relation(fields: [networkId], references: [id])
  Token         Token?            @relation(fields: [tokenId], references: [id])

  @@unique([networkId, hash])
  @@index([fromAddress])
  @@index([toAddress])
}

enum NetworkType {
  EVM
  SOLANA
}

enum PaymentStatus {
  PENDING
  UNDER_PAYMENT
  COMPLETED
  EXPIRED
  CANCELLED
  PROCESSING
}

enum TokenStandard {
  NATIVE
  ERC20
  BEP20
  TRC20
  SPL
}

enum AddressBindingType {
  TOPUP
  SINGLE_USE_PAYMENT
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum WebhookProvider {
  ALCHEMY
}
