// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Wallet {
  id          String        @id @default(uuid())
  address     String        @unique
  addressType String // EVM, BTC, SOL, etc.
  // network     String // base-mainnet, base-testnet, etc.
  label       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
}

enum WalletRole {
  MASTER // pertenece a MasterAccount
  DEPOSIT
  GAS_TANK
  USER
}

model MasterAccount {
  id        String   @id @default(uuid())
  label     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WalletWebhook {
  webhookId String   @id
  network   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id                     String            @id @default(uuid())
  txHash                 String            @unique
  network                String
  status                 TransactionStatus @default(PENDING)
  type                   TransactionType
  confirmations          Int               @default(0)
  confirmationRetryCount Int               @default(0)
  errorMessage           String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id])
}

enum TransactionType {
  GAS_TRANSFER
  SWEEP_FUNDS
  DEPOSIT
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Token {
  id                  String @id
  name                String
  symbol              String
  tokenAddress        String
  network             String
  decimals            Int
  crossNetworkTokenId String // share between same token in different networks USDC in base, arbitrum, etc. will have the same id
}
