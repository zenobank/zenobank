{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/tokens/canonical": {
      "get": {
        "description": "Returns all available tokens grouped by payment method (on-chain and Binance Pay)",
        "operationId": "TokensController_getCanonicalTokens_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved canonical tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CanonicalTokensResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get all canonical tokens",
        "tags": [
          "tokens"
        ]
      }
    },
    "/api/v1/checkouts": {
      "post": {
        "operationId": "CheckoutsController_createCheckout_v1",
        "parameters": [
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "description": "External API Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCheckoutDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Create a new checkout",
        "tags": [
          "Checkouts"
        ]
      }
    },
    "/api/v1/checkouts/{id}": {
      "get": {
        "operationId": "CheckoutsController_getCheckout_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get checkout by ID",
        "tags": [
          "Checkouts"
        ]
      }
    },
    "/api/v1/checkouts/{id}/enabled-tokens": {
      "get": {
        "operationId": "CheckoutsController_getEnabledTokens_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CanonicalTokensResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get enabled tokens for a checkout",
        "tags": [
          "Checkouts"
        ]
      }
    },
    "/api/v1/stores/providers/binance-pay": {
      "post": {
        "operationId": "StoresController_createBinancePayCredential_v1",
        "parameters": [
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "description": "External API Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBinancePayCredentialDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinancePayCredentialResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Create a new store credential",
        "tags": [
          "Stores"
        ]
      }
    },
    "/api/v1/checkouts/{id}/attempts/binance-pay": {
      "post": {
        "operationId": "AttemptsController_createCheckoutAttemptBinancePay_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentAttemptDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BinancePayAttemptResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a new binance pay checkout attempt",
        "tags": [
          "Checkouts"
        ]
      }
    },
    "/api/v1/checkouts/{id}/attempts/onchain": {
      "post": {
        "operationId": "AttemptsController_createCheckoutAttemptOnchain_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentAttemptDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnchainAttemptResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a new onchain checkout attempt",
        "tags": [
          "Checkouts"
        ]
      }
    },
    "/api/v1/conversions/convert": {
      "get": {
        "operationId": "ConversionsController_convert_v1",
        "parameters": [
          {
            "name": "from",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Conversions"
        ]
      }
    },
    "/api/v1/wallets/external": {
      "post": {
        "description": "An Externall wallet is an non-custodial wallet. Address must be an EVM address.",
        "operationId": "WalletsController_registerExternalWallet_v1",
        "parameters": [
          {
            "name": "x-api-key",
            "required": true,
            "in": "header",
            "description": "External API Key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterExternalWalletDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "x-api-key": []
          }
        ],
        "summary": "Register an external wallet for a store.",
        "tags": [
          "Wallets"
        ]
      }
    },
    "/api/v1/networks": {
      "get": {
        "description": "Get all networks",
        "operationId": "NetworksController_getNetworks_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NetworkResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all networks",
        "tags": [
          "Networks"
        ]
      }
    },
    "/api/v1/webhooks/alchemy": {
      "post": {
        "description": "Receive Alchemy webhook",
        "operationId": "WebhooksController_receiveAlchemyWebhook_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Receive Alchemy webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/api/v1/users/me": {
      "get": {
        "operationId": "UsersController_getMe_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get the current user data",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/me/bootstrap": {
      "post": {
        "operationId": "UsersController_bootstrap_v1",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Create initial backend resources for the newly signed-up user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthController_check_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    }
  },
  "info": {
    "title": "API Docs",
    "description": "API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "OnChainTokenResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "USDC_ETHEREUM_MAINNET"
          },
          "canonicalTokenId": {
            "type": "string",
            "example": "USDC"
          },
          "symbol": {
            "type": "string",
            "example": "USDC"
          },
          "logoUrl": {
            "type": "string",
            "example": "https://example.com/logo.png"
          },
          "address": {
            "type": "string",
            "example": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
          },
          "decimals": {
            "type": "number",
            "example": 6
          },
          "networkId": {
            "type": "string",
            "example": "ETHEREUM_MAINNET"
          }
        },
        "required": [
          "id",
          "canonicalTokenId",
          "symbol",
          "logoUrl",
          "address",
          "decimals",
          "networkId"
        ]
      },
      "BinancePayTokenResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "USDC_BINANCE_PAY"
          },
          "canonicalTokenId": {
            "type": "string",
            "example": "USDC"
          },
          "binanceTokenId": {
            "type": "string",
            "example": "USDC"
          },
          "symbol": {
            "type": "string",
            "example": "USDC"
          },
          "logoUrl": {
            "type": "string",
            "example": "https://example.com/logo.png"
          }
        },
        "required": [
          "id",
          "canonicalTokenId",
          "binanceTokenId",
          "symbol",
          "logoUrl"
        ]
      },
      "CanonicalTokensResponseDto": {
        "type": "object",
        "properties": {
          "ONCHAIN": {
            "description": "On-chain tokens available for payments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnChainTokenResponseDto"
            }
          },
          "BINANCE_PAY": {
            "description": "Binance Pay tokens available for payments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BinancePayTokenResponseDto"
            }
          }
        },
        "required": [
          "ONCHAIN",
          "BINANCE_PAY"
        ]
      },
      "CreateCheckoutDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "maxLength": 256,
            "example": "order-12345",
            "description": "Unique order identifier"
          },
          "priceAmount": {
            "type": "string",
            "example": "100.12",
            "description": "Price amount in the specified currency"
          },
          "priceCurrency": {
            "type": "string",
            "example": "USD",
            "description": "ISO 4217 currency code"
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true,
            "default": null,
            "maxLength": 2048,
            "format": "uri",
            "example": "https://example.com/webhook",
            "description": "Webhook URL to notify checkout status changes. For example, when the checkout is paid"
          },
          "verificationToken": {
            "type": "string",
            "nullable": true,
            "default": null,
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Verification token signed with an secret key to ensure webhook integrity"
          }
        },
        "required": [
          "orderId",
          "priceAmount",
          "priceCurrency",
          "webhookUrl",
          "verificationToken"
        ]
      },
      "CheckoutResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ckl1234567890",
            "description": "Checkout ID"
          },
          "orderId": {
            "type": "string",
            "example": "order-12345",
            "description": "Unique order identifier"
          },
          "priceCurrency": {
            "type": "string",
            "example": "USD",
            "description": "Currency code"
          },
          "priceAmount": {
            "type": "string",
            "example": "100.00",
            "description": "Price amount"
          },
          "status": {
            "type": "string",
            "enum": [
              "OPEN",
              "COMPLETED",
              "EXPIRED",
              "CANCELLED"
            ],
            "example": "OPEN",
            "description": "Current status of the checkout"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true,
            "example": "2025-10-05T12:00:00Z",
            "description": "Expiration date"
          },
          "checkoutUrl": {
            "type": "string",
            "example": "https://pay.zenobank.io/ckl1234567890",
            "description": "URL to complete the checkout"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-10-04T10:00:00Z",
            "description": "Creation date"
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true,
            "example": "https://example.com/webhook",
            "description": "Webhook URL to notify checkout status changes. For example, when the checkout is paid"
          }
        },
        "required": [
          "id",
          "orderId",
          "priceCurrency",
          "priceAmount",
          "status",
          "expiresAt",
          "checkoutUrl",
          "createdAt",
          "webhookUrl"
        ]
      },
      "CreateBinancePayCredentialDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "example": "your-api-key",
            "description": "API Key"
          },
          "apiSecret": {
            "type": "string",
            "example": "your-api-secret",
            "description": "API Secret"
          },
          "accountId": {
            "type": "string",
            "example": "your-account-id",
            "description": "Account ID"
          }
        },
        "required": [
          "apiKey",
          "apiSecret",
          "accountId"
        ]
      },
      "BinancePayCredentialResponseDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "example": "cuid_1234567890abcdef"
          },
          "accountId": {
            "type": "string",
            "example": "568321"
          }
        },
        "required": [
          "apiKey",
          "accountId"
        ]
      },
      "CreatePaymentAttemptDto": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string",
            "maxLength": 256,
            "description": "Token ID to use for this attempt",
            "example": "USDC_ETHEREUM_MAINNET"
          },
          "checkoutId": {
            "type": "string",
            "maxLength": 256,
            "description": "Checkout ID to use for this attempt",
            "example": "ckl1234567890"
          }
        },
        "required": [
          "tokenId",
          "checkoutId"
        ]
      },
      "BinancePayAttemptResponseDto": {
        "type": "object",
        "properties": {
          "depositAccountId": {
            "type": "string",
            "description": "Deposit Binance ID for the payment attempt",
            "example": "568321"
          },
          "tokenPayAmount": {
            "type": "string",
            "description": "Token pay amount for the payment attempt",
            "example": "100"
          },
          "binanceTokenId": {
            "type": "string",
            "description": "Binance token ID for the payment attempt",
            "example": "USDC"
          }
        },
        "required": [
          "depositAccountId",
          "tokenPayAmount",
          "binanceTokenId"
        ]
      },
      "WalletResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the wallet",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "address": {
            "type": "string",
            "description": "Wallet address",
            "example": "0xc429e068b65b3462f0e422b3ea388a7a37b23bff"
          },
          "network": {
            "type": "string",
            "description": "Wallet network",
            "example": "ETHEREUM_MAINNET",
            "enum": [
              "ETHEREUM_MAINNET",
              "BASE_MAINNET",
              "ARBITRUM_ONE_MAINNET",
              "BNB_MAINNET",
              "POLYGON_POS_MAINNET",
              "ETHEREUM_HOLESKY",
              "ETHEREUM_SEPOLIA"
            ]
          },
          "label": {
            "type": "string",
            "nullable": true,
            "description": "Wallet label",
            "example": "Main Wallet"
          }
        },
        "required": [
          "id",
          "address",
          "network",
          "label"
        ]
      },
      "OnchainAttemptResponseDto": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string",
            "description": "Token ID for the payment attempt",
            "example": "USDC"
          },
          "tokenPayAmount": {
            "type": "string",
            "description": "Token pay amount for the payment attempt",
            "example": "100"
          },
          "networkId": {
            "type": "string",
            "description": "Network ID for the payment attempt",
            "example": "ETHEREUM_MAINNET"
          },
          "depositWallet": {
            "$ref": "#/components/schemas/WalletResponseDto"
          }
        },
        "required": [
          "tokenId",
          "tokenPayAmount",
          "networkId",
          "depositWallet"
        ]
      },
      "RegisterExternalWalletDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "required": [
          "address"
        ]
      },
      "NetworkResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ETHEREUM_MAINNET"
          },
          "chainId": {
            "type": "number",
            "nullable": true,
            "example": 1,
            "description": "Chain ID of evm networks"
          },
          "name": {
            "type": "string",
            "example": "Ethereum Mainnet"
          },
          "displayName": {
            "type": "string",
            "example": "Ethereum"
          },
          "networkType": {
            "type": "string",
            "example": "EVM",
            "enum": [
              "EVM",
              "SOLANA"
            ]
          },
          "isTestnet": {
            "type": "boolean",
            "example": false
          },
          "minBlockConfirmations": {
            "type": "number",
            "example": 3
          },
          "maxConfirmationAttempts": {
            "type": "object",
            "example": 100
          },
          "confirmationRetryDelay": {
            "type": "object",
            "example": 1000
          }
        },
        "required": [
          "id",
          "chainId",
          "name",
          "displayName",
          "networkType",
          "isTestnet",
          "minBlockConfirmations",
          "maxConfirmationAttempts",
          "confirmationRetryDelay"
        ]
      },
      "StoreResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the store",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Name of the store",
            "example": "My Store"
          },
          "apiKey": {
            "type": "string",
            "description": "API key for the store",
            "example": "cuid_1234567890abcdef"
          },
          "binancePayCredential": {
            "nullable": true,
            "description": "Binance Pay credential",
            "allOf": [
              {
                "$ref": "#/components/schemas/BinancePayCredentialResponseDto"
              }
            ]
          },
          "wallets": {
            "description": "Associated wallets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletResponseDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "apiKey",
          "binancePayCredential",
          "wallets"
        ]
      },
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the user",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "stores": {
            "description": "The user&apos;s stores",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreResponseDto"
            }
          }
        },
        "required": [
          "id",
          "stores"
        ]
      }
    }
  }
}